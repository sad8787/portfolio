default:
  image: nexus.tmk-group.com:5000/docker:dind

before_script:
  - mkdir -p $HOME/.docker
  - cat ${DOCKER_AUTH_CONFIG} > $HOME/.docker/config.json

variables:
 PROJECT_PATH: chatbot
 IMAGE_NAME: hrbot

stages:
  - build
  - push
  - deploy

build-image:
  stage: build
  tags:
    - chatbot_docker
  script:
    - echo "Building docker image ${REGISTRY_WRITE_URL}/${PROJECT_PATH}/${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}..."
    - >
      docker build 
      . 
      --tag $REGISTRY_WRITE_URL/$PROJECT_PATH/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA 
      --build-arg ARG_REGISTRY=$REGISTRY_READ_URL 
      --build-arg ARG_INDEX_URL=$PIP_INDEX_URL 
      --build-arg ARG_TRUSTED_HOST=$PIP_TRUSTED_HOST 
      --build-arg ARG_USER=$TEST_ENV_USER 
      --build-arg ARG_PASSWORD=$TEST_ENV_PASSWORD 
      --build-arg ARG_TOKEN=$TEST_ENV_TOKEN
  only:
    - main
    - staging

push-image:
  stage: push
  tags:
    - chatbot_docker
  variables:
    GIT_STRATEGY: none
  script:
    - echo "Pushing docker image $REGISTRY_WRITE_URL/$PROJECT_PATH/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA to hosted registry..."
    - docker push $REGISTRY_WRITE_URL/$PROJECT_PATH/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA
  only:
    - main
    - staging

push_latest:
  stage: push
  tags:
    - chatbot_docker
  needs: ["push-image"]
  variables:
    GIT_STRATEGY: none
  script:
    - docker pull $REGISTRY_WRITE_URL/$PROJECT_PATH/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA
    - docker tag $REGISTRY_WRITE_URL/$PROJECT_PATH/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA $REGISTRY_WRITE_URL/$PROJECT_PATH/$IMAGE_NAME:latest
    - docker push $REGISTRY_WRITE_URL/$PROJECT_PATH/$IMAGE_NAME:latest
  only:
    - main

push_tagged:
  variables:
    GIT_STRATEGY: none
  stage: push
  script:
    - docker pull $REGISTRY_WRITE_URL/$PROJECT_PATH/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA
    - docker tag $REGISTRY_WRITE_URL/$PROJECT_PATH/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA $REGISTRY_WRITE_URL/$PROJECT_PATH/$IMAGE_NAME:$CI_COMMIT_REF_NAME
    - docker push $REGISTRY_WRITE_URL/$PROJECT_PATH/$IMAGE_NAME:$CI_COMMIT_REF_NAME
  rules:
    - if: '$CI_COMMIT_TAG =~ /^V\d+.*/ || $CI_COMMIT_TAG =~ /^.*-release$/'

deploy_to_test:      
  variables:
    DOCKER_HOST: "ssh://$DEPLOYER_NAME@$TEST_SERVER_IP"
  tags:
    - chatbot_docker
  stage: deploy  
  before_script:
    - eval $(ssh-agent -s)
    - cat "$DEPLOYER_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $REGISTRY_READ_URL
    - cat $ENV_FILE > ./.env
  environment: staging
  script:
    - echo "Deploying application..."
    - docker-compose pull
    - docker-compose down 
    - docker-compose up -d --force-recreate
    - ls -al ./
    - scp -P22 ./docker-compose.yml $DEPLOYER_NAME@$TEST_SERVER_IP:/var/docker/hrbot/
    - scp -P22 ./.env $DEPLOYER_NAME@$TEST_SERVER_IP:/var/docker/hrbot/
    - echo "Application successfully deployed."
  after_script:
    - docker logout $REGISTRY_READ_URL
  only:
    - staging    

deploy_to_prod:      
  variables:
    DOCKER_HOST: "ssh://$DEPLOYER_NAME@$PROD_SERVER_IP"
  tags:
    - chatbot_docker
  stage: deploy  
  before_script:
    - eval $(ssh-agent -s)
    - cat "$DEPLOYER_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $REGISTRY_READ_URL
    - cat $PROD_ENV_FILE > ./.env
  environment: production
  script:
    - echo "Deploying application..."
    - docker-compose pull
    - docker-compose down 
    - docker-compose up -d --force-recreate
    - ls -al ./
    - scp -P22 ./docker-compose.yml $DEPLOYER_NAME@$PROD_SERVER_IP:/var/docker/hrbot/
    - scp -P22 ./.env $DEPLOYER_NAME@$PROD_SERVER_IP:/var/docker/hrbot/
    - echo "Application successfully deployed."
  after_script:
    - docker logout $REGISTRY_READ_URL
  only:
    - main
  when: manual    
